<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="msapplication-TileColor" content="transparent">
    <meta name="msapplication-TileImage" content="/img/icons.ico/ms-icon-144x144.png">
    <meta name="theme-color" content="none">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <script type="text/javascript" src="/js/obs-websocket.js"></script>
    <!-- <script type="text/javascript" src="/dist/o-l.js"></script> -->
    <script src="/js/obs-local.js"></script>
    <script type="text/javascript" src="/dist/s-u.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Oswald|Roboto|Roboto+Condensed|Roboto+Mono|Roboto+Slab|Sunflower:300" rel="stylesheet">
    <script src="https://embed.twitch.tv/embed/v1.js"></script>
    <script src="https://unpkg.com/twitch-js@1.2.5/dist/twitch-js.min.js"></script>
    <script type="text/javascript" src="/js/tapic.js"></script>
    <!-- <script type="text/javascript" src="/dist/t-u.js"></script> -->
    <script src="/js/tapic-utils.js"></script>
    <script type="text/javascript" src="/dist/c-u.js"></script>
    <script type="text/javascript" src="/dist/v-u.js"></script>
    <script type="text/javascript" src="/dist/lip-u.js"></script>
    <script type="text/javascript" src="/dist/o-c.js"></script>
    <script type="text/javascript" src="/dist/tw-js.js"></script>
    <title>Stream Daddy</title>
    <!-- <link rel="stylesheet" href="/css/sdFree.css"> -->
    <link rel="stylesheet" href="/css/remoteStyles.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="apple-touch-icon" sizes="57x57" href="/img/icons.ico/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/img/icons.ico/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/img/icons.ico/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/img/icons.ico/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/img/icons.ico/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/img/icons.ico/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/img/icons.ico/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/img/icons.ico/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/img/icons.ico/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192"  href="/img/icons.ico/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/img/icons.ico/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/img/icons.ico/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/img/icons.ico/favicon-16x16.png">
    <link rel="manifest" href="/img/icons.ico/manifest.json">
    <script type="text/javascript">
		(function(document,navigator,standalone) {
			// prevents links from apps from oppening in mobile safari
			// this javascript must be the first script in your <head>
			if ((standalone in navigator) && navigator[standalone]) {
				var curnode, location=document.location, stop=/^(a|html)$/i;
				document.addEventListener('click', function(e) {
					curnode=e.target;
					while (!(stop).test(curnode.nodeName)) {
						curnode=curnode.parentNode;
					}
					// Condidions to do this only on links to your own app
					// if you want all links, use if('href' in curnode) instead.
					if(
						'href' in curnode && // is a link
						(chref=curnode.href).replace(location.href,'').indexOf('#') && // is not an anchor
						(	!(/^[a-z\+\.\-]+:/i).test(chref) ||                       // either does not have a proper scheme (relative links)
							chref.indexOf(location.protocol+'//'+location.host)===0 ) // or is in the same protocol and domain
					) {
						e.preventDefault();
						location.href = curnode.href;
					}
				},false);
			}
		})(document,window.navigator,'standalone');
        // Disabling pinch to zoom and 
        document.addEventListener('touchmove', function (event) {
            if (event.scale !== 1) { event.preventDefault(); }
        }, false);
        var lastTouchEnd = 0;
        document.addEventListener('touchend', function (event) {
            var now = (new Date()).getTime();
            if (now - lastTouchEnd <= 450) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
        document.addEventListener('dblclick', function (event) {
            event.preventDefault();
        });

        window.onresize = function(e) {
            var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
            var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            var r = parseInt(w) / parseInt(h);
            console.log("width: ", w, r);
            console.log("height: ", h, r);
            // Checks whether  
            if(r <= 1.0013368983957218 && !unset) {
                unset = true;
                clearRow();
            } else if (unset) {
                setChat();
                unset = false;
            }
        };
    </script>
</head>

<body>
    <!-- loading screen -->
    <!-- <div id="loading">
        <div id="loadingElements">
            <div id="loadingHeader"></div>
            <img src="/img/sdanimation.gif" alt="loading">
            <div class="sk-circle">
                <div class="sk-circle1 sk-child"></div>
                <div class="sk-circle2 sk-child"></div>
                <div class="sk-circle3 sk-child"></div>
                <div class="sk-circle4 sk-child"></div>
                <div class="sk-circle5 sk-child"></div>
                <div class="sk-circle6 sk-child"></div>
                <div class="sk-circle7 sk-child"></div>
                <div class="sk-circle8 sk-child"></div>
                <div class="sk-circle9 sk-child"></div>
                <div class="sk-circle10 sk-child"></div>
                <div class="sk-circle11 sk-child"></div>
                <div class="sk-circle12 sk-child"></div>
            </div>
            <h1 id="loadingTxt">connecting to OBS</h1>
            <div id="loadingFooter"></div>
        </div>
    </div> -->
    <div id="grid">
        <div id="scenes"></div>
        <div id="bot">
             <div>
                <a href="#" id="bot1" class="bota">
                    <i class="material-icons">timelapse</i>
                </a>
                <p>Slow Mode</p>
                </div> 
             <div>
                <a href="#" id="bot2" class="bota">
                    <i class="material-icons">card_membership</i>
                </a>
                <p>Sub Only</p>
                </div>
            <div>
                <a href="#" id="bot3" class="bota">
                    <i class="material-icons">class</i>
                </a>
                <p>Follower Only</p>
            </div> 
            <div>
                <a href="#" id="bot4" class="bota">
                    <i class="material-icons">lock</i>
                </a>
                <p>Ban</p>
            </div> 
            <div>
                <a href="#" id="bot5" class="bota">
                    <i class="material-icons">lock_open</i>
                </a>
                <p>UnBan</p>
            </div> 
            <div>
                <a href="#" id="bot6" class="bota">
                    <i class="material-icons">timer_off</i>
                </a>
                <p>Timeout</p>
            </div> 
            <div>
                <a href="#" id="bot7" class="bota">
                    <i class="material-icons">message</i>
                </a>
                <p>Message</p>
            </div>
            <div>
                <a href="#" id="bot8" class="bota">
                    <i class="material-icons">contact_mail</i>
                </a>
                <p>Whisper</p>
            </div> 
            <div>
                <a href="#" id="bot9" class="bota">
                    <i class="material-icons">exposure_plus_1</i>
                </a>
                <p>Score</p>
            </div> 
            <div>
                <a href="#" id="bot10" class="bota">
                    <i class="material-icons" id="bot10i">format_align_justify</i>
                </a>
                <p id="bot10p">Set in Dashboard</p>
            </div> 
            <div>
                <a href="#" id="bot11" class="bota">
                    <i class="material-icons" id="bot11i">format_align_justify</i>
                </a>
                <p id="bot11p">Set in Dashboard</p>
            </div> 
            <div>
                <a href="#" id="bot12" class="bota">
                    <i class="material-icons" id="bot12i">format_align_justify</i>
                </a>
                <p id="bot12p">Set in Dashboard</p>
            </div> 
        </div>
        <div id="chatbox">
            <div id="chatHeader">
                <div id="chatImg">
                    <img src="<%= user.imgUrl %>" alt="">
                </div>
                <div id="chatTtl">
                    <p><%= user.displayName %> Chat</p>
                </div>
                <div id="chatBigger">
                    <button id="expandChat" class="chatButton">
                        <i class="material-icons">expand_more</i>
                    </button>
                </div>
                <div id="chatSmaller">
                    <button id="contractChat" class="chatButton">
                        <i class="material-icons">expand_less</i>
                    </button>
                </div>
            </div>
            <div id="chat" onwheel="chatScrolled()" ontouchmove="chatScrolled()"></div>
        </div>
        <div id="info">
            <div id="date">
                <h4 id="datetime">Wed 7:06pm</h4>
            </div>
            <div id="timerID">
                <i id="timerI" class="material-icons">timer</i>
            </div>
            <div id="timeStreamed">
                <h4 id="timer">0hrs 0min</h4>
            </div>
            <div id="pop">
                <i id="popI" class="material-icons">person</i>
            </div>
            <div id="vCountD">
                <h4 id="viewcountText">-</h4>
            </div>
        </div>
        <div id="titles">
            <div id="gameD">
                <h1 id="gameName">Game Title</h1>
            </div>
            <div id="streamD">
                <h1 id="streamTitleText">Stream Title</h1>
            </div>
        </div>
        <div id="controls">
            <div id="controlGrid">
                <div id="sourceArea">
                    <button id="addSource" class="controlButton">
                        <i id="addSourceI" class="material-icons">add</i>
                    </button>
                    <p class="tags">Sources</p>
                </div>
                <div id="profileArea">
                    <button id="profilesModalBtn" class="controlButton">
                        <i id="profilesI" class="material-icons">sync_problem</i>
                    </button>
                    <p class="tags">Profiles</p>
                </div>
                <div id="muteContainer">
                    <button id="mute">
                        <i id="muteI" class="material-icons"></i>
                    </button>
                </div>
                <div id="camArea">
                    <button id="camButton" class="controlButton">
                        <i id="camI" class="material-icons"></i>
                    </button>
                    <p class="tags" id="firstCam"></p>
                </div>
                <div id="extraArea">
                    <button id="extraButton" class="controlButton">
                        <i id="extraI" class="material-icons">mic</i>
                    </button>
                    <p class="tags" id="extraLabel">Extra Source</p>
                </div>
                <div id="streamArea">
                    <button id="streaming" class="controlButton">
                        <i id="streamI" class="material-icons"></i>
                    </button>
                    <p class="tags" id="streamLabel"></p>
                </div>
                <div id="volumeArea">
                    <button id="volModalButton" class="controlButton">
                        <i id="volI" class="material-icons">surround_sound</i>
                    </button>
                    <p class="tags" id="mixerLabel">Audio Mixer</p>
                </div>
            </div>
        </div>
        <div id="vid">
            <div id="stream"></div>
            <button id="exStream"><i id="exI" class="material-icons">expand_less</i></button>
        </div>
        <div id="logoArea">
            <img id="sdLogo" src="/img/mainLogo.png" alt="SD">
        </div>
        <div id="logos">
            <img id="logoAvatar" src="<%= user.imgUrl %>" alt="Avatar">
            <img id="logosLogo" src="/img/mainLogo.png" alt="SD">
        </div>
        <div id="design"></div>
    </div>
    <div id="behindVid"></div>
    <!-- MODALS -->

    <!-- Prompts -->
    <div id="promptModal" class="promptModal">
        <div id="prompt" class="prompt">
            <p id="promptInstr" class="promptInstr">Are you sure?</p>
            <button id="opt1Btn" class="opt1Btn">Yes!</button>
            <button id="opt2Btn" class="opt2Btn">Cancel</button>
        </div>
    </div>
    <div id="promptModalL" class="promptModal">
        <div id="promptL" class="promptL">
            <p id="promptInstrL" class="promptInstr">Are you sure?</p>
            <div id="optionCon"></div>
            <button id="opt1BtnL" class="opt1Btn">GO</button>
            <button id="opt2BtnL" class="opt2Btn">Cancel</button>
        </div>
    </div>

    <!-- Modal that shows that OBS could not be connected to -->
    <div id="openingModal">
        <div id="openingModalContent" class="modal-content">
            <i class="material-icons" id="headerI">error_outline</i>
            <h3>UH OH! Unable to connect to OBS!</h3>
            <h5>Please make sure that OBS is on and then reload.</h5>
            <h5>If OBS is on, it could be that the local IP needs to be updated. 
                Go to your <a href="/user/<%= user.displayName %>">dashboard</a> on the 
                computer running OBS and click on the "Update Local IP" button or manually input 
                the code using the input below.
            </h5>
            <input type="text" id="input" value="<%= user.localIp %>">
            <button id="updateBtn"><i class="material-icons" id="headerBtnI">update</i></button>
        </div>
    </div>
    
    <!-- Modal for extra scenes -->
    <div class="modal" id="scenesModal">
        <div id="scenesModalContent" class="modal-content">
            <span id="scenesCloseBtn" class="closeBtn">&times;</span>
        </div>
    </div>
    
    <!-- Game and Stream Titles / Names Modals -->
    <div id="gameTtlModal" class="modal">
        <div id="warn">
            <h3>Note: Both must be updated or one will be left blank.</h3>
        </div>
        <div id="gameModalContent" class="topModalContent">
            <div class="header"></div>
            <span id="gameCloseButton" class="closeBtn">&times;</span>
            <p>Set the game you're playing (Must be exact)</p>
            <div class="autocomplete">
                <input type="text" id="gameTtlUpdate">
            </div>
            <div id="updateGame" class="smlModalBtn">
                <i class="material-icons">update</i>
            </div>
        </div>
    </div>
    <div id="streamTtlModal" class="modal">
        <div id="warn">
            <h3>Note: Both must be updated or one will be left blank.</h3>
        </div>
        <div id="streamModalContent" class="topModalContent">
            <div class="header"></div>
            <span id="streamCloseButton" class="closeBtn">&times;</span>
            <p>Set your Channel Status</p>
            <div class="iput">
                <input type="text" id="streamTtlUpdate">
            </div>
            <div id="updateStream" class="smlModalBtn">
                <i class="material-icons">update</i>
                <p>Update your Channel Status</p>
            </div>
        </div>
    </div>

    <!-- Control Grid Modals -->

    <!-- Sources -->
    <div id="sourcesModal" class="modal">
        <div id="sources" class="modal-content">
            <div class="modalAccent"></div>
            <p>Sources</p>
            <span id="sourcesCloseBtn" class="closeBtn">&times;</span>
            <div id="sourcesContent">
                <div id="audioSources"></div>
                <div id="videoSources"></div>
                <div id="etcSources"></div>
            </div>
            <div class="modalLogo">
                <img src="/img/logoTiny.png" alt="logo">
            </div>
        </div>
    </div>
    <!-- Profiles -->
    <div id="profilesModal" class="modal">
        <div id="profiles" class="modal-content">
            <div class="modalAccent"></div>
            <p>Profiles</p>
            <span id="profileCloseBtn" class="closeBtn">&times;</span>
            <div id="profileBtns"></div>
            <div class="modalLogo">
                <img src="/img/logoTiny.png" alt="logo">
            </div>
        </div>
    </div>
    <!-- Audio Mixer -->
    <div id="volModal" class="modal">
        <div id="volumes">
            <div id="inputs">
                <img src="/img/xlr.png" alt="input">
                <img src="/img/xlr.png" alt="input">
                <img src="/img/xlr.png" alt="input">
                <img src="/img/xlr.png" alt="input">
                <img src="/img/xlr.png" alt="input">
                <hr>
            </div>
            <div id="brand">
                <div id="brandGrid">
                    <img id="brandLogo" src="/img/logoTiny.png" class="mixerLogo" alt="logo">
                    <div id="brandTitles">
                        <img src="/img/logoLetteringwhtsm.png" id="letteringLogo" alt="logo lettering">
                        <p>Audio Mixer SxY-1</p>
                    </div>
                    <div id="stereo">
                        <img src="/img/stereoInput.png" alt="1/8">
                        <img src="/img/stereoInput.png" alt="1/8">
                        <img src="/img/stereoInput.png" alt="1/8">
                    </div>
                </div>
            </div>
            <div id="volSliders"></div>
        </div>
    </div>
    <!-- ban / unban -->
    <div id="banModal" class="modal">
        <div id="banModalContent" class="modal-content">
            <span id="banCloseBtn" class="closeBtn">&times;</span>
            <div class="modalAccent"></div>
            <p class="banTitle">SD Bot</p>
            <h1 id="banTxt">Select User to Ban</h1>
            <div id="choices"></div>
            <div class="modalLogo">
                <img src="/img/logoTiny.png" alt="logo">
            </div>
        </div>
    </div>
    <div id="hidden">
        <%= JSON.stringify(user.custom) %>
    </div>
</body>
<script>
    // Set Global variables
    const ip = "<%= user.localIp %>" + ":4444";
    const userId = "<%= user.userId %>";
    const displayName = "<%= user.displayName %>";
    const oauth = 'oauth:<%= user.oauth %>';
    const channels = [`#${displayName}`];
    const twitchId = "<%= user.twitchId %>";
    var svdMsg = '<%= user.winMsg %>';
    var micName;
    var camName;
    var extraName;
    var camSet = new Set([]);
    var audioSet = new Set([]);
    var sourcesSet = new Set([]);
    var specialSet = new Set([]);
    var volumeSet = new Set([]);
    var muted = false;
    var streaming;
    var muteButton = document.getElementById("mute");
    var muteITag = document.getElementById('muteI');
    var streamButton = document.getElementById("streaming");
    var streamITag = document.getElementById('streamI');
    var streamLabel = document.getElementById('streamLabel');
    var camButton = document.getElementById('camButton');
    var camITag = document.getElementById('camI');
    var camText = document.getElementById('firstCam');
    var extraButton = document.getElementById('extraButton');
    var extraITag = document.getElementById('extraI');
    var extraLabel = document.getElementById('extraLabel');
    var timerLabel = document.getElementById('timer');
    var theScene = document.getElementById('selectedScene');
    var timer;
    var updateTimer;
    var minutes = 0;
    var hours = 0;
    var secondsStr = "";
    var minutesStr = "";
    var hoursStr = "";
    var totalSources = 0;
    var hasScrolled = false;
    var users = new Set();
    var sOnly = false;
    var fOnly = false;
    var winMsg;
    var score;
    var data = null;
    var myTitle = "";
    var myViewcount = 0;
    var myGameId = "";
    var myLiveStatus = "";
    var myThumbnail = "";
    var myGameName = "";
    var allGames;
    var unset = false;

    // OBS Websocket Instantiation

    // check if user has a password set in his info
    // if there is just run it with the password
    // else run it without it but with checks if there is a failure
    var obs = new OBSWebSocket();
    if ("<%= user.password %>" != undefined) {
        obs.connect({ address: ip, password: "<%= user.password %>" }, function(err) {
            if (err) {
                console.log("error connecting to socket", err);
                if (err.error == "Authentication Failed.") {
                    console.log(err);
                    passwordNeeded();
                    document.getElementById('mainInstruction').innerText = "Update Password on File";
                    document.getElementsByClassName('passwordInstructions')[0].innerText = "The password we have on file is incorrect.";
                }
            } else {
                console.log("connected");
                obsOn();
                setUpRemote();
                setChat();
            }
        });
    } else {
        obs.connect({ address: ip }, function (err) {
            if (err) {
                console.log("error connecting to socket", err);
                if (err.error == "Authentication Failed.") {
                    console.log(err);
                    passwordNeeded();
                }
            } else {
                console.log("connected");
                obsOn();
                setUpRemote();
                setChat();
            }
        });
    }
    // Adds event listeners to buttons
    addEventListeners();
    // Embedding video
    setVideo();

    TAPIC.setup(oauth, function (username) {

        // By default, TAPIC refreshes API information every 5 seconds, which is the minimum.
        // Setting the refresh rate is optional.
        TAPIC.setRefreshRate(10);

        // This is also required for a lot of things to work
        TAPIC.joinChannel(username, function () {
            // tests();
        });
    });
    setTapicListeners();

        // To get started with this example, specify a channel with which to connect.
    // const channels = [`#${displayName}`];
  
    // In this example, TwitchJS is included via a <script /> tag, so we can
    // access the library from window.
  
    // Define client options.
    const TwitchJS = window.TwitchJS;
    const options = {
      connection: {
        reconnect: true,
        secure: true,
      },
      options: {
        // Some methods may require a client ID. If needed, please provide a
        // client ID below.
        // clientId: CLIENT_ID,
        debug: true,
      },
      // Some methods may require an identity. If needed, please provide one
      // here. Prepend your token with "oauth:".
      identity: {
        username: displayName,
        password: oauth,
      },
      channels,
    };
  
    const tjs = new TwitchJS.Client(options);
  
    // Add listeners for events, e.g. a chat event.
    // client.on('chat', (channel, userstate, message, self) => {
    //   // You can do something with the chat message here ...
    //   console.info({
    //     channel,
    //     userstate,
    //     message,
    //     self,
    //   });
    // });

    setBotButtons();
  
    // Finally, connect to the Twitch channel.
    tjs.connect();

    var sTop = 0;

    var chatd = document.getElementById('chat')
    console.log(chatd);
    chatd.addEventListener('scroll', function(e) {
        console.log('e', e);
        console.log("scroll: ", chatd.scrollTop);
        if(chatd.scrollTop < sTop + 30 && chatd.scrollTop > sTop - 30) {
            sTop = chatd.scrollTop;
        } else {
            chatd.scrollTop = sTop;
        }
    });
</script>
<!-- <script src="/js/twitchJS.js"></script> -->
</html>